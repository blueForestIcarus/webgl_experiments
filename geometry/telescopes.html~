<!DOCTYPE html>

<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<title>three.js webgl - geometry - cube</title>
		<meta charset="utf-8">
		<style>test 
			body {
				margin: 0px;
				background-color: #000000;
				overflow: hidden;
			}
		</style>
	</head>
	<body>

		<script src="/lib/three.min.js"></script>
		<script src="/lib/js/Mirror.js"></script>
		<script src="/lib/js/controls/OrbitControls.js"></script>
		<script src="/lib/js/libs/stats.min.js"></script>

		<script>

			var camera, scene, renderer;
			var mesh;
			var stats;

			// scene size
			var WIDTH = window.innerWidth;
			var HEIGHT = window.innerHeight;

			// camera
			var VIEW_ANGLE = 45;
			var ASPECT = WIDTH / HEIGHT;
			var NEAR = 1;
			var FAR = 500;
			
			var speed = .01;
			
			init();
			animate();

			function init() {
			
				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				document.body.appendChild( stats.domElement );

				renderer = new THREE.WebGLRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

				// camera
				camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
				camera.position.set( 0, 75, 160 );

				cameraControls = new THREE.OrbitControls(camera, renderer.domElement);
				cameraControls.target.set( 0, 0, 0);
				cameraControls.maxDistance = 400;
				cameraControls.minDistance = 10;
				cameraControls.update();

				scene = new THREE.Scene();

                var material = new THREE.MeshPhongMaterial({
                    ambient: 0x333333, 
                    color: 0xffffff, 
                    specular: 0xffffff, 
                    shininess: 20, 
                    doubleSided:true,                        
                    shading: THREE.SmoothShading 
                    });
				
                
				scene.add( new THREE.Mesh(telescope(2,1,10,10,10),material));

				var geometry = new THREE.BoxGeometry( 10, 10, 10 );
				mesh = new THREE.Mesh( geometry, material );
                scene.add(mesh);

                var geometry = new THREE.CylinderGeometry(2,2,10/50,50,1);
                geometry.applyMatrix( new THREE.Matrix4().makeRotationZ(Math.PI/2));
                geometry.applyMatrix( new THREE.Matrix4().makeTranslation(10 + 10/Math.sqrt(2),10 + (10/Math.sqrt(2)) , 0));
				mesh = new THREE.Mesh( geometry, material );
                scene.add(mesh);

                var directionalLight = new THREE.DirectionalLight( 0xff3300, .7 );
                directionalLight.position.set( 0, .1, .1 );
                scene.add( directionalLight );

                var directionalLight = new THREE.DirectionalLight( 0x0055ff, .7 );
                directionalLight.position.set( 0, -.1, -.1 );
                scene.add( directionalLight );

                var light = new THREE.AmbientLight( 0x808080 ); // soft white light
                scene.add( light );

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );
			}

			function animate() {

				requestAnimationFrame( animate );
				
				var timer = Date.now() * .01;
                
				cameraControls.update();
                
				renderer.render( scene, camera );
                stats.update();
			}
            
            function telescope(r1,r3,w1,w2,w3) {
                var polys = 50;

                var r2 = (r3+r1)/2;

                //tweak sizes
                if(r1 * Math.sqrt(2)/2 < r2){
                    r1 = 2*r2/Math.sqrt(2);
                }
                if(r2 * Math.sqrt(2)/2 < r3){
                    r3 = r2 * Math.sqrt(2)/2;
                }

                var geometryOne = new THREE.CylinderGeometry( r1, r1, w1, polys, 1 );
                geometryOne.applyMatrix( new THREE.Matrix4().makeRotationZ(Math.PI/2));
                geometryOne.applyMatrix( new THREE.Matrix4().makeTranslation(w1/2 + w2/Math.sqrt(2),w3 + (w2/Math.sqrt(2)) , 0));

                var geometryTwo = new THREE.CylinderGeometry( r2, r2, w2+r2, polys, 1 );
                geometryTwo.applyMatrix( new THREE.Matrix4().makeRotationZ(- Math.PI/4));
                geometryTwo.applyMatrix( new THREE.Matrix4().makeTranslation( w2/Math.sqrt(8) + r2/Math.sqrt(8) , w3 + (w2/Math.sqrt(8)) + r2/Math.sqrt(9) , 0));

                var r2 = (r3+r1)/2;
                var geometryThree = new THREE.CylinderGeometry( r3, r3, w3 + r3*2, polys, 1 );
                geometryThree.applyMatrix( new THREE.Matrix4().makeTranslation( 0, w3/2,0));
                
                var geometry = geometryThree;
                geometry.merge(geometryTwo);
                geometry.merge(geometryOne);
                
                return geometry;
            }


		</script><canvas width="1680" height="925" style="width: 1680px; height: 925px;"></canvas>

	


</body></html>
