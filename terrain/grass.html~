<!DOCTYPE html>

<html lang="en">
    <head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<title>three.js webgl - geometry - cube</title>
		<meta charset="utf-8">
		<style>
			body {
				margin: 0px;
				background-color: #000000;
				overflow: hidden;
                    
			}
		</style>
	</head>
	<body>
        <audio autoplay loop src="music.mp3"></audio>

		<script src="/lib/three.min.js"></script>
		<script src="/lib/js/libs/stats.min.js"></script>
		<script src="/lib/js/controls/PointerLockControls.js"></script>
        <script src="terrain.js"></script>
        <script src="telescope.js"></script>
        <script src="camera.js"></script>

		<script src="/lib/js/shaders/CopyShader.js"></script>
		<script src="/lib/js/shaders/DotScreenShader.js"></script>
		<script src="/lib/js/shaders/RGBShiftShader.js"></script>
	    <script src="/lib/js/shaders/DigitalGlitch.js"></script>

		<script src="/lib/js/postprocessing/EffectComposer.js"></script>
		<script src="/lib/js/postprocessing/RenderPass.js"></script>
		<script src="/lib/js/postprocessing/MaskPass.js"></script>
		<script src="/lib/js/postprocessing/ShaderPass.js"></script>
		<script src="/lib/js/postprocessing/GlitchPass.js"></script>

        <!-- skybox shaders -->
        <script type="x-shader/x-vertex" id="sky-vertex">
            varying vec3 vWorldPosition;

            void main() {
                vec4 worldPosition = modelMatrix * vec4( position, 1.0 );
                vWorldPosition = worldPosition.xyz;

                gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
            }
        </script>

        <script type="x-shader/x-fragment" id="sky-fragment">
            uniform vec3 topColor;
            uniform vec3 bottomColor;
            uniform float offset;
            uniform float exponent;

            varying vec3 vWorldPosition;

            void main() {
                float h = normalize( vWorldPosition + offset ).y;
                gl_FragColor = vec4( mix( bottomColor, topColor, max( pow( h, exponent ), 0.0 ) ), 1.0 );
            }
        </script>

        <script type="x-shader/x-vertex" id="snow_vertex">


			uniform float radiusX;
			uniform float radiusZ;
			uniform float size;
			uniform float scale;
			uniform float height;
			uniform float elapsedTime;
			uniform float speedH;
			uniform float speedV;

			void main() {
				vec3 pos = position;
				pos.x += cos((elapsedTime + position.z) * 0.25 * speedH) * radiusX;



				pos.y = mod(pos.y - elapsedTime * .5 * speedV, height);
				pos.z += sin((elapsedTime + position.x) * 0.25 * speedH) * radiusZ;

				vec4 mvPosition = modelViewMatrix * vec4( pos, 1.0 );

				gl_PointSize = size * ( scale / length( mvPosition.xyz ) );

				gl_Position = projectionMatrix * mvPosition;
			}
		</script>
		
		<script type="x-shader/x-fragment" id="snow_fragment">
			uniform vec3 color;
			uniform float opacity;
			uniform sampler2D texture;

			void main() {
				vec4 texColor = texture2D( texture, gl_PointCoord );
				gl_FragColor = texColor * vec4( color, opacity );
			}

		</script>

		<script>
            //renderer
			var scene, renderer, stats, composer;

			// scene size
			var WIDTH = window.innerWidth;
			var HEIGHT = window.innerHeight;

			// camera
			var VIEW_ANGLE = 45;
			var ASPECT = WIDTH / HEIGHT;
			var NEAR = 1;
			var FAR = 2000000;

            var terrain;

            var telescopes;

/*
	Gives THREE.js Lambert Material a Toon / Cel look
*/
THREE.ShaderLib['lambert'].fragmentShader = THREE.ShaderLib['lambert'].fragmentShader.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
THREE.ShaderLib['lambert'].fragmentShader = "uniform vec3 diffuse;\n" + THREE.ShaderLib['lambert'].fragmentShader.substr(0, THREE.ShaderLib['lambert'].fragmentShader.length-1);
THREE.ShaderLib['lambert'].fragmentShader += [
	"#ifdef USE_MAP",
	"	gl_FragColor = texture2D( map, vUv );",
	"#else",
	"	gl_FragColor = vec4(diffuse, 1.0);",
	"#endif",
	"	vec3 basecolor = vec3(gl_FragColor[0], gl_FragColor[1], gl_FragColor[2]);",
	"	float alpha = gl_FragColor[3];",
	"	float vlf = vLightFront[0];",
	/*
	// This version presevers colors, but looks less cartoonish (good with simple textures, colors)
	"	if (vlf< 0.50) { gl_FragColor = vec4(mix( basecolor, vec3(0.0), 0.5), alpha); }",
	"	if (vlf>=0.50) { gl_FragColor = vec4(mix( basecolor, vec3(0.0), 0.3), alpha); }",
	"	if (vlf>=0.75) { gl_FragColor = vec4(mix( basecolor, vec3(1.0), 0.0), alpha); }",
	"	if (vlf>=0.95) { gl_FragColor = vec4(mix( basecolor, vec3(1.0), 0.3), alpha); }",
	*/
	// This version looks more cartoonish, but washes colors out (looks good with complex textures)
	"	if (vlf< 0.50) { gl_FragColor = vec4(mix( basecolor, vec3(0.0), 0.5), alpha); }",
	"	if (vlf>=0.50) { gl_FragColor = vec4(mix( basecolor, vec3(0.25), 0.5), alpha); }",
	"	if (vlf>=0.75) { gl_FragColor = vec4(mix( basecolor, vec3(0.5), 0.5), alpha); }",
	"	if (vlf>=0.95) { gl_FragColor = vec4(mix( basecolor, vec3(0.75), 0.5), alpha); }",

	"	gl_FragColor.xyz *= vLightFront;",
	"}"
	].join("\n");
			
			init();
			animate();

            function init(){
                //setup three.js
                setup();

                //create the scene

				// Add Sky Mesh
                var vertexShader = document.getElementById('sky-vertex').textContent;
                var fragmentShader = document.getElementById('sky-fragment').textContent;
                var uniforms = {
                    topColor: {type: "c", value: new THREE.Color(0x222222)}, 
                    bottomColor: {type: "c", value: new THREE.Color(0xffffff)},
                    offset: {type: "f", value: 50}, exponent: {type: "f", value: 0.6}
                }

                var skyMaterial = new THREE.ShaderMaterial({
                    vertexShader: vertexShader, 
                    fragmentShader: fragmentShader,     
                    uniforms: uniforms, 
                    side: THREE.BackSide, 
                    fog: false
                });

	            var skyGeometry = new THREE.SphereGeometry( 450000, 32, 15 );
	            var skyMesh = new THREE.Mesh( skyGeometry, skyMaterial );
                scene.add(skyMesh);

				var material = new THREE.MeshLambertMaterial({
                    color: 0xffffff,
                    shading: THREE.FlatShading,
                    //shading: THREE.SmoothShading,  
                    vertexColors: THREE.VertexColors,
                    wireframeLinewidth: 2
                });

                material.side = THREE.DoubleSide;

                terrain = new Terrain(100);
                terrain.createTerrain(10,10);
                terrain.render(scene,material);

                var mesh = new THREE.Mesh(new THREE.BoxGeometry( 50, 50, 50),material);
	            scene.add(mesh);

                //telescopes = new TelescopeManager(scene);

                //add light
                
	            var light = new THREE.DirectionalLight( 0x404040, 6);
	            light.position.set( 0.75, 0.75, 1.0 ).normalize();
	            scene.add( light );

	            var light = new THREE.DirectionalLight( 0x404040, 1);
	            light.position.set( -0.75, 0.75, -1.0 ).normalize();
	            scene.add( light );

	            var light = new THREE.DirectionalLight( 0x404040, 1);
	            light.position.set( 0, 0, 1.0 ).normalize();
	            scene.add( light );

                var light = new THREE.AmbientLight( 0x090909 );
                scene.add( light );
                
                //dotView();
            }

            window.addEventListener( 'keydown', function (event){if(event.keyCode==72){heightTest(2,200,5)}}, false );

			function setup() {
                //set up fps monitor
				stats = new Stats();
				stats.domElement.style.position = 'absolute';
				stats.domElement.style.top = '0px';
				document.body.appendChild( stats.domElement );

                //set up the renderer
				renderer = new THREE.WebGLRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );
				document.body.appendChild( renderer.domElement );

                //create the scene
				scene = new THREE.Scene();

                //camera
                initCameraPointLock(scene);

                //handle window resize
				window.addEventListener( 'resize', onWindowResize, false );
			}


			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );
			}

			function animate() {
				requestAnimationFrame( animate );
                
				controls.update();

                frame();

				renderer.render( scene, camera );
                //composer.render();

				stats.update();
			}

            function frame(){
                cameraStand.position.y = terrain.getHeight(cameraStand.position.x, cameraStand.position.z) + 100;
                //telescopes.updateTarget(cameraStand.position.x, cameraStand.position.y, cameraStand.position.z);
            }

            function heightTest(s, d, r){
                meshes = [];

				material = new THREE.MeshLambertMaterial({
                    color: 0xff00ff,
                    shading: THREE.FlatShading, 
                    emission: 0xff00ff,
                    vertexColors: THREE.VertexColors,
                    wireframeLinewidth: 2
                });

                geometry = new THREE.BoxGeometry(s,s,s);
                for(x = -d + cameraStand.position.x ; x < d + cameraStand.position.x; x+=r){
                    for(z = -d + cameraStand.position.z ; z < d +cameraStand.position.z; z+=r){
                        mesh = new THREE.Mesh(geometry,material);
                        mesh.position.x=x;
                        mesh.position.z=z;
                        mesh.position.y=terrain.getHeight(x,z);
                        scene.add(mesh);
                        meshes.push(mesh);
                    }
                }
                return meshes;
            }

            function dotView(){
            	composer = new THREE.EffectComposer( renderer );
				composer.addPass( new THREE.RenderPass( scene, camera ) );

				var effect = new THREE.ShaderPass( THREE.RGBShiftShader );
				effect.uniforms[ 'amount' ].value = 0.0005;
				effect.renderToScreen = true;
				composer.addPass( effect );            
            }

            function glitch(){
				composer = new THREE.EffectComposer( renderer );
				composer.addPass( new THREE.RenderPass( scene, camera ) );

				glitchPass = new THREE.GlitchPass();
				glitchPass.renderToScreen = true;
				composer.addPass( glitchPass );          
            }
            

		</script><canvas width="1680" height="925" style="width: 1680px; height: 925px;"></canvas>

	


</body></html>
